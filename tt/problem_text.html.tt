[% PROCESS includes/header.tti %]
[% PROCESS includes/html.tti %]
[% tex_styles %]
[% IF mathjax %]
<script type="text/javascript">
function set_tex() {
[%#
  CATS::TeX::Lite preserves spaces between identifiers.
  Emulate that for compatibility by replacing such spaces with "\,".
  Future problems should use "\," or "\ " explicitly.
  Since JavaScript RegExp does not support lookbehind, use magic
  to distinguish identifiers (abc) from TeX commands (\abc).
-%]
  var tex = $(this);
  tex.data({ lite: tex.html() });
  var magic = '~!!!~';
  var t = tex.attr('title');
  t = t.replace(/(\\[a-zA-Z]+)/g, '$1' + magic);
  t = t.replace(/([a-zA-Z0-9},])\s+(?=[a-zA-Z])/g, '$1\\,');
  t = t.replace(new RegExp(magic, 'g'), '');
  tex.html("\\(" + t + '\\)');
}

function unset_tex() {
  var tex = $(this);
  var lite = tex.data().lite;
  if (lite)
    tex.html(lite);
}

function apply_mathjax(p) {
  MathJax.Hub.Queue(
    function() { p.find('span.TeX').each(set_tex); },
    [ 'Typeset', MathJax.Hub, p[0] ]);
}
</script>
<script type="text/x-mathjax-config">
MathJax.Hub.Config({
  TeX: {
    Macros: { deg: '^\\circ' }
  },
  'HTML-CSS': { scale: 100 },
  SVG: { scale: 100 },
  CommonHTML: { scale: 100 },
  tex2jax: { ignoreClass: 'problem_text', processClass: 'TeX' },
  skipStartupTypeset: true
});
[%#
MathJax.Hub.Startup.signal.Interest(function (message) { console.log("Startup: " + message); });
MathJax.Hub.signal.Interest(function (message) { console.log("Hub: " + message); });
-%]
MathJax.Hub.Register.StartupHook('onLoad', function () {
  [%# Convert math one problem at a time as a compromise between speed and stability. -%]
  $('div.problem_text').each(function() {
    var p = $(this);
    if (!p.find('.basic_math')[0].checked)
      apply_mathjax(p);
  });
});
</script>
<script type="text/javascript" src="https://cdn.rawgit.com/mathjax/MathJax/2.7.1/MathJax.js?config=TeX-AMS_CHTML"></script>
<script type="text/javascript">window.MathJax || document.write('<script src="js/lib/MathJax/MathJax.js?config=TeX-AMS_CHTML"><\/script>')</script>
<script type="text/javascript" src="js/lib/jquery.min.js"></script>
[% END %]
[%- text_width = '1000px' -%]
<style>
  a.problem_menu_trigger { font-size: small; color: inherit; padding: 1px 3px; background-color: #eeeeee; }
  a.problem_menu_trigger:hover { font-size: medium; }
  div.problem_menu { display: none; width: 100%; background-color: #eeeeee; }
  div.problem_menu ul { list-style-type: none; padding: 0; }
  div.problem_menu ul li { display: inline-block; padding: 3px 10px; border-right: 1px solid; }
  div.problem_menu input[type=checkbox] { display: none; }
  div.problem_menu input[type=checkbox] + span:after { content: '\2610'; }
  div.problem_menu input[type=checkbox]:checked + span:after { content: '\2611'; }
  div.problem_menu li.langs { font-weight: bold; }
  div.problem_menu li.langs a { font-weight: normal; }
  div.problem_text table.problem_header { width: 100%; }
  div.problem_text p, div.problem_text ul, div.problem_text ol { hyphens: auto; max-width: [% text_width %]; text-align: justify; text-indent1: 3em; }
  div.problem_text p span { text-indent: 0; }
  div.problem_text table.thin_border { border-collapse: collapse; border: 1px; }
  div.problem_text table.thin_border td, div.problem_text table.thin_border th { border: 1px solid black; padding: 2px; }
</style>
</head>
<body>
[% FOREACH p IN problems; il = p.iface_lang; PROCESS "lang/$il/problem_text_p.html.tt" UNLESS capt.problem_text.item(il); END; %]
[% FOREACH p IN problems; c = capt.problem_text.item(p.iface_lang) %]
<div class="problem_text" id="p[% p.id %]" [% UNLESS loop.first %]style="page-break-before: always"[% END %] lang="[% p.lang %]">
  <a name="pr[% p.code || p.id %]"></a>

  <h2>
  [% IF p.color %]<span class="problem_color" style="background-color: [% p.color | html %];"></span>[% END %]
  [% "${c.problem} ${p.code}. " IF p.code; p.title | html %]
  <a class="jsonly problem_menu_trigger" href="#">&#x2261;</a>
  </h2>
  <div class="jsonly problem_menu"><ul>
    <li><a class="problem_list_link" href="[% p.href_problem_list %]">[% c.problem_list %]</a></li>
    <li><label><input type="checkbox" class="whitespace"><span></span> [% c.visible_spaces %]</label></li>
    <li><label><input type="checkbox" class="basic_math"><span></span> [% c.basic_math %]</label></li>
    <li><label><input type="checkbox" class="wide_text"><span></span> [% c.wide_text %]</label></li>
    [% IF problems.size == 1 && p.langs && p.langs.size > 1 -%]
    <li class="langs">[% FOREACH lang IN p.langs; maybe_href(lang == p.lang ? '' : '#', lang); ' '; END %]</li>
    [%- END %]
  </ul></div>
  <table class="problem_header">
  [% IF p.author %]<tr><td class="narrow nobr">[% c.author %]:</td><td colspan="4">[% p.author | html %]</td></tr>[% END %]
  <tr>
    <td class="narrow nobr">[% p.interactive_io ? c.input_output : c.input_file %]:</td>
    <td>[% p.interactive_io ? c.interactive : (p.input_file == '*STDIN' ? c.standard_input : p.input_file) | html %]</td>
    <td>&nbsp;</td>
    <td class="narrow nobr">[% c.time_limit %]:</td><td>[% p.time_limit %] [% c.seconds %]</td></tr>
  <tr>
    <td class="narrow nobr">[% p.interactive_io ? '' : c.output_file _ ':' %]</td>
    <td>[% p.interactive_io ? '' : (p.output_file == '*STDOUT' ? c.standard_output : p.output_file) | html %]</td>
    <td>&nbsp;</td>
    <td class="narrow nobr">[% c.memory_limit %]:</td><td>[% p.memory_limit %] [% c.megabytes %]</td></tr>
  [% IF p.write_limit || p.show_points %]
  <tr>
    [% IF p.show_points %]
    <td class="narrow nobr">[% c.max_points %]:</td><td>[% p.max_points %]</td>
    [% ELSE %]
    <td></td><td></td>
    [% END %]
    <td>&nbsp;</td>
    [% IF p.write_limit %]
    <td class="narrow nobr">[% c.write_limit %]:</td><td>[% p.write_limit %] [% c.bytes %]</td>
    [% ELSE %]
    <td></td><td></td>
    [% END %]
  </tr>
  [% END %]
  [% IF p.keywords %]<tr><td class="narrow nobr">[% c.keywords %]:</td><td colspan="4">[% p.keywords %]</td></tr>[% END %]
  </table>

  [%- MACRO section(name, caption) IF p.item(name).trim() %]
    <h3>[% c.item(caption || name) %]</h3>
    [% p.item(name) %]
  [% END -%]

  [% section('statement') %]
  [% IF p.explanation %]
    [% section('pconstraints') %]
    [% section('explanation') %]
  [% ELSE %]
    [% section('input_format', p.input_file == '*STDIN' ? 0 : 'input_file_format') %]
    [% IF p.formal_input %]
      <h3>[% c.formal_input %]</h3>
      <pre>[% p.formal_input %]</pre>
    [% END %]
    [% section('output_format', p.output_file == '*STDOUT' ? 0 : 'output_file_format') %]
    [% section('pconstraints') %]
    [% IF p.samples.size %]
      <h3>[% c.sample_tests %]</h3>
      <table class="sample" id="sample[% p.id %]">
      <tr><th>[% c.sample_number %]</th>
      <th>[% IF p.input_file == '*STDIN'; c.standard_input; ELSE; c.input_file %] (<code>[% p.input_file | html %]</code>)[% END %]</th>
      <th>[% IF p.output_file == '*STDOUT'; c.standard_output; ELSE; c.output_file %] (<code>[% p.output_file | html %]</code>)[% END %]</th></tr>
      [% FOREACH s IN p.samples %]
      <tr>
        <td>[% s.rank %]</td>
        <td><pre><code>[% s.in_file | html %]</code></pre></td>
        <td><pre><code>[% s.out_file | html %]</code></pre></td>
      </tr>
      [% END %]
      </table>
    [% END %]
  [% END %]
  <hr>
</div>
[% END %]
<script type="text/javascript">
$('.problem_menu_trigger').click(function() { $(this).parent().next().toggle(); return false; });

var sid = (new RegExp('sid=([a-zA-Z0-9]{30})')).exec(window.location.href);
var uid = (new RegExp('uid=([0-9]+)')).exec(window.location.href);
if (sid) {
  sid = sid[1];
  $('.problem_list_link').each(function() { this.href += ';sid=' + sid; });
}

function toggle_whitespace() {
  var p = $(this).parents('.problem_text');
  var ws = this.checked;
  p.find('.sample code').each(function() {
    var t = $(this).text();
    if (ws)
      t = t.replace(/ /g, '\u2423');
    else
      t = t.replace(/\u2423/g, ' ');
    $(this).text(t);
  });
}
$('.problem_text div.problem_menu input.whitespace').click(toggle_whitespace).each(toggle_whitespace);

$('.basic_math').click(function() {
  var p = $(this).parents('.problem_text');
  if (this.checked)
    p.find('span.TeX').each(unset_tex);
  else
    apply_mathjax(p);
});

function toggle_wide_text() {
  var p = $(this).parents('.problem_text');
  p.children('p, ul, ol').css({ 'max-width': this.checked ? 'none' : '[% text_width %]' });
}
$('.wide_text').click(toggle_wide_text).each(toggle_wide_text);

$('.problem_text div.problem_menu li.langs a').click(function() {
  var p = document.location.pathname;
  if (p.substring(p.length - 5) === '.html') {
    [%# Static page. %]
    var n = '-pl-' + this.innerText;
    document.location.pathname =
      p.indexOf('-pl-') < 0 ? p.replace('.html', n + '.html') : p.replace(/-pl-[a-z]+/, n);
  }
  else {
    var s = document.location.search;
    document.location.search =
      s.indexOf('pl=') < 0  ? s + ';pl=' + this.innerText : s.replace(/pl=[a-z]+/, 'pl=' + this.innerText);
  }
});

[% IF has_snippets %]
[%# Assigning to innerHTML forcibly comments out CDATA sections. https://stackoverflow.com/a/7068088 %]
function htmlWithCDATASectionsToHtmlWithout(html) {
  var ATTRS = '(?:[^>\"\']|\"[^\"]*\"|\'[^\']*\')*',
    [%# names of tags with RCDATA or CDATA content. %]
    SCRIPT = '[sS][cC][rR][iI][pP][tT]',
    STYLE = '[sS][tT][yY][lL][eE]',
    TEXTAREA = '[tT][eE][xX][tT][aA][rR][eE][aA]',
    TITLE = '[tT][iI][tT][lL][eE]',
    XMP = '[xX][mM][pP]',
    SPECIAL_TAG_NAME = [SCRIPT, STYLE, TEXTAREA, TITLE, XMP].join('|'),
    ANY = '[\\s\\S]*?',
    AMP = /&/g,
    LT = /</g,
    GT = />/g;
  return html.replace(new RegExp(
    [%# Entities and text. %]
    '^<]+' +
    [%# Comment. %]
    '|<!--' + ANY + '-->' +
    [%# Regular tag. %]
    '|<\/?(?!' + SPECIAL_TAG_NAME + ')[a-zA-Z]' + ATTRS + '>' +
    [%# Special tags. %]
    '|<\/?' + SCRIPT   + '\\b' + ATTRS + '>' + ANY + '<\/' + SCRIPT   + '\\s*>' +
    '|<\/?' + STYLE    + '\\b' + ATTRS + '>' + ANY + '<\/' + STYLE    + '\\s*>' +
    '|<\/?' + TEXTAREA + '\\b' + ATTRS + '>' + ANY + '<\/' + TEXTAREA + '\\s*>' +
    '|<\/?' + TITLE    + '\\b' + ATTRS + '>' + ANY + '<\/' + TITLE    + '\\s*>' +
    '|<\/?' + XMP      + '\\b' + ATTRS + '>' + ANY + '<\/' + XMP      + '\\s*>' +
    [%# CDATA section. Content in capturing group 1. %]
    '|<!\\[CDATA\\[(' + ANY + ')\\]\\]>' +
    [%# A loose less-than. %]
    '|<', 'g'),

    function (token, cdataContent) {
      return 'string' === typeof cdataContent ?
        cdataContent.replace(AMP, '&amp;').replace(LT, '&lt;').replace(GT, '&gt;') :
        token === '<' ? '&lt;' [%# Normalize loose less-thans. %] :
        token;
    });
}

var timeout_interval = 1000;
var all_snippets_received = 0;

function fill_snippets(data, snippet_list) {
  all_snippets_received = 1;
  for (var i = 0; i < snippet_list.length; ++i) {
    var snippet_data = data[snippet_list[i].getAttribute('cats-snippet')];
    if (snippet_data !== undefined && snippet_data !== null)
      snippet_list[i].innerHTML = htmlWithCDATASectionsToHtmlWithout(snippet_data);
    else
      all_snippets_received = 0;
  }
}

function get_snippets_data(problem_id, request_url) {
  var snippets = $('#p' + problem_id + ' [cats-snippet]');
  if (sid)
    request_url += ';sid=' + sid;
  if (uid)
    request_url += ';uid=' + uid[1];

  $.ajax({
    method: 'GET',
    url: request_url,
    data: { snippet_names: $.map(snippets, function(s) { return s.getAttribute('cats-snippet'); }) },
    [%# Prevent jQuery from suffixing names of array parameters with '[]' %]
    traditional: true,
    success: function(result) { fill_snippets(result, snippets); }
  }).then(function() {
    if (!all_snippets_received) {
      setTimeout(update_snippets, timeout_interval);
      timeout_interval *= 2;
    }
  });
}

function update_snippets() {
  [% FOREACH p IN problems %]
    get_snippets_data([% p.problem_id %], '[% p.href_get_snippets %]');
  [% END %]
}
$(document).ready(update_snippets);
[% END %]

</script>
[% PROCESS includes/timing.tti %]
</body>
</html>
